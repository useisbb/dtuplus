diff --git a/lib/log.lua b/lib/log.lua
index 2a17cd9..fd24b1b 100755
--- a/lib/log.lua
+++ b/lib/log.lua
@@ -20,6 +20,24 @@ LOGLEVEL_FATAL = 0x06;
 local LEVEL_TAG = {'T', 'D', 'I', 'W', 'E', 'F'}
 local PREFIX_FMT = "[%s]-[%s]"
 
+-- 映射syslog 和 luat log的关系,index 是syslog level,value是 luat level
+local SYSLOG_REMAP={
+    LOG_SILENT,
+    LOGLEVEL_FATAL,
+    LOGLEVEL_FATAL,
+    LOGLEVEL_ERROR,
+    LOGLEVEL_WARN,
+    LOGLEVEL_INFO,
+    LOGLEVEL_DEBUG,
+    LOGLEVEL_TRACE}
+local REMOTE_LEVEL_TAG = {'T', 'D', 'I', 'W', 'E', 'F'}
+local REMOTE_LOG_LEVEL = LOGLEVEL_ERROR
+
+local REMOTE_BUFF_MAX = 50
+local remote_log_buff={}
+-- 远程日志地址
+local remote_addr = "udp://log.dyiots.com:514"
+
 --- 内部函数，支持不同级别的log打印及判断
 -- @param level ，日志级别，可选LOGLEVEL_TRACE，LOGLEVEL_DEBUG等
 -- @param tag   ，模块或功能名称(标签），作为日志前缀
@@ -31,15 +49,52 @@ local function _log(level, tag, ...)
     -- INFO 作为默认日志级别
     local OPENLEVEL = LOG_LEVEL and LOG_LEVEL or LOGLEVEL_INFO
     -- 如果日志级别为静默，或设定级别更高，则不输出日志
-    if OPENLEVEL == LOG_SILENT or OPENLEVEL > level then return end
-    -- 日志打印输出
-    local prefix = string.format(PREFIX_FMT, LEVEL_TAG[level], type(tag)=="string" and tag or "")
-    print(prefix, ...)
+    if (OPENLEVEL == LOG_SILENT or OPENLEVEL > level) == false then
+        -- 日志打印输出
+        local prefix = string.format(PREFIX_FMT, LEVEL_TAG[level], type(tag)=="string" and tag or "")
+        print(prefix, ...)
+    end
+    -- 如果日志级别为静默，或设定级别更高，则不输出日志
+    if (REMOTE_LOG_LEVEL == LOG_SILENT or REMOTE_LOG_LEVEL > level) == false then
+        -- logstash 解析表达式
+        -- (?<host>(?:\S+)?)\s(?<level>(?:\S+)?)\s(?<timestamp>(?:\S+)?)\s([<])(?<tags>([a-zA-Z0-9\s]+)?)([>])(?<message>([\S\s]+)?)
+        -- 日志打印输出
+        local prefix = string.format("%s/%s %s %s <%s>",misc.getImei(),device_id or"",REMOTE_LEVEL_TAG[level],os.date("%x-%X"), type(tag)=="string" and tag or "")
+        if #remote_log_buff > REMOTE_BUFF_MAX then table.remove(remote_log_buff,1) end
+        local str = prefix
+        for _,i in pairs({...})  do     --此处的｛...｝表示可变参数构成的数组
+            if type(i) == "userdata" then
+                str = str .. "xxxx "
+            elseif type(i) == "boolean" then
+                str = str .. (i and "true " or "false ")
+            else
+                str = str .. i .. " "
+            end
+        end
+        table.insert(remote_log_buff,str)
+    end
 
 -- TODO，支持hookup，例如对某级别日志做额外处理
 -- TODO，支持标签过滤
 end
 
+-- @addr tcp://192.168.1.1:12345
+-- @level 1-8
+function remote_cfg(addr,level)
+    if not addr or not level then return end
+    remote_addr = addr
+    REMOTE_LOG_LEVEL = SYSLOG_REMAP[level]
+end
+
+function get_remote_addr()
+    return remote_addr
+end
+
+function get_remote_log()
+    return table.remove(remote_log_buff,1)
+end
+
+
 --- 输出trace级别的日志
 -- @param tag   ，模块或功能名称，作为日志前缀
 -- @param ...   ，日志内容，可变参数
